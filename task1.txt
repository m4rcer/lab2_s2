Напишите скрипт, который читает текстовый файл и выводит символы
в порядке убывания частоты встречаемости в тексте. Регистр символа
не имеет значения. Программа должна учитывать только буквенные
символы (символы пунктуации, цифры и служебные символы слудет
игнорировать). Проверьте работу скрипта на нескольких файлах с
текстом на английском и русском языках, сравните результаты с
таблицами, приведенными в wikipedia.org/wiki/Letter_frequencies.
2. Напишите скрипт, позволяющий искать в заданной директории и в ее
подпапках файлы-дубликаты на основе сравнения контрольных сумм
(MD5). Файлы могут иметь одинаковое содержимое, но отличаться
именами. Скрипт должен вывести группы имен обнаруженных файловдубликатов.
3. Задан путь к директории с музыкальными файлами (в названии
которых нет номеров, а только названия песен) и текстовый файл,
хранящий полный список песен с номерами и названиями в виде строк
формата «01. Freefall [6:12]». Напишите скрипт, который корректирует
имена файлов в директории на основе текста списка песен.
4. Напишите скрипт, который позволяет ввести с клавиатуры имя
текстового файла, найти в нем с помощью регулярных выражений все
подстроки определенного вида, в соответствии с вариантом. Например,
для варианта № 1 скрипт должен вывести на экран следующее:
Строка 3, позиция 10 : найдено '11-05-2014'
Строка 12, позиция 2 : найдено '23-11-2014'
Строка 12, позиция 17 : найдено '23-11-2014'
Вариант 1: найдите все даты – подстроки вида «11-05-2014».
Вариант 2: найдите все значения времени – подстроки вида «23:15:59».
12
Вариант 3: найдите все IPv4-адреса – подстроки вида «192.168.5.48».
Вариант 4: найдите все строки вида «type x = value», где type – это тип
(может принимать значение int, short или byte), х – любое слово, value –
любое число.
Вариант 5: найдите все номера телефонов – подстроки вида
«(000)1112233» или «(000)111-22-33».
Вариант 6: найдите все строки вида «x: type [N]», где type – это тип
(может принимать значение int, short или byte), х – любое слово, N –
любое положительное целое число.
(количество скобок может быть любым, начиная с 1).
Вариант 8: найдите все логические выражения – подстроки вида
«x&&y», «x&y», где х и у – любые слова. Количество пробелов может
быть также любым.
Вариант 9: найдите все донецкие почтовые индексы – подстроки вида
«83000, Донецк» (первые 2 символа строго закреплены: «83»).
Вариант 10: Найдите все полные имена директорий Windows –
подстроки вида «C:\Dir\SubDir3».
5. Введите с клавиатуры текст. Программно найдите в нем и выведите
отдельно все слова, которые начинаются с большого латинского
символа (от A до Z) и заканчиваются 2 или 4 цифрами, например
«Petr93», «Johnny70», «Service2002». Используйте регулярные
выражения.
6. Напишите скрипт reorganize.py, который в директории --source создает
две директории: Archive и Small. В первую директорию помещаются
файлы с датой изменения, отличающейся от текущей даты на
количество дней более параметра --days (т.е. относительно старые
файлы). Во вторую – все файлы размером меньше параметра --size байт.
Каждая директория должна создаваться только в случае, если найден
хотя бы один файл, который должен быть в нее помещен. Пример
вызова:
 reorganize --source "C:\TestDir" --days 2 --size 4096
7. Написать скрипт trackmix.py, который формирует обзорный трек-микс
альбома (попурри из коротких фрагментов mp3-файлов в
пользовательской директории). Для манипуляций со звуковыми
файлами можно использовать сторонние утилиты, например, FFmpeg.
Пример вызова и работы скрипта